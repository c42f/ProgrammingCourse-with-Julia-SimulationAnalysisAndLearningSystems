# Unit 5: Computer algebra systems and symbolic computation

```julia
#cd(@__DIR__)
#pwd()
```

```julia
#using Pkg;
# To be able to run this, have the project repository "next to" the course materials repository

#cd("../../2504_2021_project1");
#@show pwd()
#Pkg.activate(".");
# Pkg.instantiate();
#@show pwd()
#QQQQ include("poly_factorization_project.jl");
```

## Symbolic Computation





QQQQ - MISSSING STUFF - QQQQ

##### Theorem (Division Algorithm)
QQQQ - missing text - QQQQ

**Proof (Existence)**

# An example

```julia
a = 23
b = 7
q = a รท b # \div + [TAB]
@show q
@show Int(floor(a/b))

r = a % 3 
@show r;
```

```julia
function remainder(a::T,b::T) where T <: Int #Note that later we'll extend this to integral domains
    a < 0 && return remainder(-a,b) #short circuit evalution  #later replace `0` with `zero(T)`
    a < b && return a
    return remainder(a-b,b)
end
```

```julia
#note there is an in-built `rem`
remainder(23,7), rem(23,7), 23 % 7, 23- (23 รท 7)*7
```

```julia
remainder(15,5), remainder(4,101), remainder(125,4)
```

```julia
function quo(a::T,b::T) where T <: Int
    a < 0 && return -quo(-a,b)
    a < b && return 0
    return 1 + quo(a-b, b)
end
```

```julia
quo(15,5), quo(4,101), quo(125,4)
```

```julia
for (a,b) in [(15,5), (4,101), (125,4)]
    q, r = quo(a, b), rem(a, b)
    @show (a, b, q, r, a == b * q + r)
end
```

Of course, in Julia we have `%` and `รท` for remainder and  and quotient.

(Note that in Python `//` is the quotient whereas in Julia `//` defines a rational type).

```julia
2 // 3, float(2//3)  #The first // is a rational type
```

## Elementary Number Theory

QQQQ - missing text - QQQQ

```julia
# We have already seen something similar with overflow, for example:
UInt8(253) + UInt8(4)
```

```julia
UInt8(16) * UInt8(17)
```

---

#### Example

QQQQ-missing text-QQQQ

```julia
n = 6
Z_n = 0:(n-1)
```

```julia
typeof(Z_n)
```

```julia
A = [(x+y) % n for y in Z_n, x in Z_n]
```

```julia
additive_inverses = [findfirst((A .== 0)[:,k+1])-1 for k in Z_n] #Can this be done more nicely?
println(additive_inverses)
```

```julia
M = [(x*y) % n for y in Z_n, x in Z_n]
```

```julia
println([(2*y) % n for y in Z_n])
```

```julia
mult_inverses = Z_n[[sum((M .== 1)[:,k+1]) > 0 for k in Z_n]] #Can this be done more nicely?
println("Elements with a multiplicative inverse: ", mult_inverses )
println("Elements withoout a multiplicative inverse: ", setdiff(Z_n,mult_inverses))
```